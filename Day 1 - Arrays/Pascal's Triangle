class Solution {
public:
    void helper(int row , vector<vector<int>>& result , int n){
        if(row==n){
            return ;
        }

//size of curr is row+1 bcz we see at every layer of traingle, we have one more element to that of its layer's number and all are marked to 1  
        vector<int> curr(row+1,1) ;
//iteration is started from 1 and less to row bc first and last element is already 1 .. so we have to operate on middile part only ;)
        for(int i=1;i<row;i++){
//here [j-1] suggest the upper row from where we are adding 2 elements and i and i-1 are upper row's element which are being added
// 1 2 1 [i-1] row 1 2 are i and i-1 element then 2 1 are i and i-1 element
//1 3 3 1             
            curr[i] = result[row-1][i] + result[row-1][i-1] ;
        }
        result.push_back(curr);
        helper(row+1 , result , n ) ;

    }

    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> result ;
        helper(0,result,numRows);
        return result ;
    }
};
